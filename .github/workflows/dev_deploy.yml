name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]  # develop 브랜치에 push가 일어날 때 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3  # 저장소 코드 체크아웃

      - name: Set up JDK 17  # Java 개발 킷 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Create application.yml from Secrets  # GitHub Secrets에서 application.yml 생성
        run: |
          echo "$APPLICATION_YML" > application.yml
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}  # GitHub Secrets에서 가져오기

      - name: Build with Gradle  # Gradle을 사용하여 프로젝트 빌드
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Upload build artifact  # 빌드된 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: mapmoriesServer
          path: build/libs/*.jar

  deploy:
    needs: build  # build 작업이 성공적으로 완료된 후 실행
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact  # 이전 단계에서 업로드한 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: mapmoriesServer
          path: build/libs/

      - name: Deploy to EC2  # EC2에 배포
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}  # GitHub Secrets에서 가져오기
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # JAR 파일 전송
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/umc7thServer.jar
          
          # EC2에서 application.yml 생성
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'EOF'
            echo "Creating application.yml..."
            cat <<EOT > /home/$EC2_USERNAME/application.yml
            ${{ secrets.APPLICATION_YML }}
            EOT
          EOF
          
          # 애플리케이션 재시작
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            pgrep java | xargs -r kill -15
            sleep 10
            nohup java -jar /home/$EC2_USERNAME/umc7thServer.jar --spring.config.location=/home/$EC2_USERNAME/application.yml > app.log 2>&1 &
          "
          
          rm -f private_key.pem  # 민감한 정보 삭제